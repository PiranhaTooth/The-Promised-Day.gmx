<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables &amp;&amp; Persistent Check

// Read the readme.txt if you have questions about the object.

if instance_number(object_index) &gt; 1 {
    instance_destroy(); // destroy if there is more than one of these objects on creation.
} else {
    // set these in creation code
    BGM = musBoss1; // song to be played (duh?)
    timeline = -1; // timeline variable (only used if you plan on using timelines. set in creation code);
    
    room_created = room; // used for destroying self if not in correct room
    step_list = ds_list_create(); // list for holding steps.
    step_start = 0; // the start of the song (to be played from. the real start is at step 0)
    step_current = 0; // the current step
    step_start_keybind = ord("T"); // keybind for changing step start
    step_get_keybind = ord("S"); // keybind for recording current step
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy step_list list
ds_list_destroy(step_list)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stepcounter Control [Add Boss Things Here]
if timeline = -1 {
    switch(step_current) {
        case 0:
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get Current Step &amp;&amp; Controls
if global.debugMode = true
{
    // step start assigning
    if keyboard_check_pressed(step_start_keybind) {
        var step_start_question = "Enter a step_start value. The old step_start value was ["+string(step_start)+"]."; // question to be asked
        step_start = real(get_string(step_start_question,"")) // grab step start from user
        step_start = step_start - step_start mod 50; // make it an incriment of 50
    }
    
    // step record
    if keyboard_check_pressed(step_get_keybind) { 
        ds_list_add(step_list,string(objBoss1.timer)); // add the current step to the list
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Room Check &amp;&amp; Play Music
if (room_created = room) {
    if (BGM != -1) { scrPlayMusic(BGM,false); } // loops BGM
    audio_sound_set_track_position(BGM,step_start/50) // sets BGM position
    step_end = audio_sound_length(BGM)*50; // get BGM end position
    objBoss1.timer = step_start; // set the current step to the step start
    ds_list_clear(step_list); // clear the step list
    if (timeline != -1) {
        timeline_index = timeline; // set index for timeline
        timeline_position = step_start; // set the starting position
        timeline_running = true; // run the timeline
    }
} else {
    instance_destroy(); // destroy if not in correct room.
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Debug Information

var color = c_green // color of text
var font = fDefault12 // mine is [Arial,Size 10]
var align = fa_left; // text allignment. if on right side use fa_right

var anchor_dev = 32; // distance from edges of scren
var xx = 0; // anchor postion x
var yy = anchor_dev; // anchor position y
var yy_inc = 16; // incriment between each message

draw_set_color(color); // set color
draw_set_font(font); // set font
draw_set_halign(align); // set text halign

if instance_exists(objBoss1)
{
    if align = fa_right {
        xx = 800-anchor_dev; // anchor postion (on right);draw_text(xx,yy,string(fps) + " :FPS"); yy += yy_inc; // fps
        draw_text(xx,yy,string(instance_count) + " :Instance Count"); yy += yy_inc; // number of instances
        draw_text(xx,yy,string(step_start) + " :Step Start"); yy += yy_inc; // start
        if (timeline == -1) {
            draw_text(xx,yy,string(step_current) + " :Step Current"); yy += yy_inc; // current
        } else {
            draw_text(xx,yy,string(timeline_position) + " :Timeline Position"); yy += yy_inc; // current
        }
        
        yy += yy_inc
        draw_text(xx,yy,"List"); yy += yy_inc; // list
        for(var i = 0; i &lt; ds_list_size(step_list); i++) {
            draw_text(xx,yy,ds_list_find_value(step_list,i) + " :S"); yy += yy_inc; // list element
        }
    } else if align = fa_left {
        xx = anchor_dev // anchor position (on left)
        draw_text(xx,yy,"FPS: " +string(fps)); yy += yy_inc; // fps
        draw_text(xx,yy,"Instance Count: " + string(instance_count)); yy += yy_inc; // number of instances
        draw_text(xx,yy,"Step Start: " + string(step_start)); yy += yy_inc; // start
        if (timeline == -1) {
            draw_text(xx,yy,"objBoss.timer: " + string(objBoss1.timer)); yy += yy_inc; // current
        } else {
            draw_text(xx,yy,"Timeline Position: " + string(timeline_position)); yy += yy_inc; // current
        }
        
        yy += yy_inc
        draw_text(xx,yy,"List"); yy += yy_inc; // list
        for(var i = 0; i &lt; ds_list_size(step_list); i++) {
            draw_text(xx,yy,"S: " + ds_list_find_value(step_list,i)); yy += yy_inc; // list element
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
