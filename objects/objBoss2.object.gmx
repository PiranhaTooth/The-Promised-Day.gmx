<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBoss2Collapse</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(objBoss2Hitbox)
{
    instance_create(x,y,objBoss2Hitbox);
}

image_speed = 0;
image_index = 7;

//state machine
PREBOSS = 0;
WARMUP = 1;
TELEPORTING = 2;
ATTACK1 = 3;
ATTACK2 = 4;
ATTACK3 = 5;
ATTACK4 = 6;
ATTACK5 = 7;
ATTACK6 = 8;
DEAD = 9;

state = PREBOSS;
statePrevious = PREBOSS;
attackPrevious = PREBOSS;
attackComplete = false;

//boss variables
fighting = false;
hpMax = 250;
hp = 90 //hpMax;                         CHANGE THIS ON FINISH
shield = false;
shieldDone = true       //false;            CHANGE THIS ON FINISH ALSO FIX IT

//teleporting
teleportLeft = false;
teleportRight = false;
teleportTimer = 0;
teleportReappear = false;
teleported = false;

//attack1
attack1Timer = 0;
attack1MaxDistance = 64;
for(var i = 0; i &lt; 4; i++)
{
    attack1Spawned[i] = false;
}

//attack2
attack2Timer = 0;
attack2Counter = 0;

//attack3
attack3Timer = 0;
attack3Counter = 0;
attack3SpawnX = 0;
attack3SpawnY = 0;
attack3SpawnX2 = 0;
attack3SpawnY2 = 0;

//attack4
attack4Timer = 0;
attack4Counter = 0;
attack4ImpactTime = irandom_range(20,50);

if attack4Counter mod 2 == 0
{
    attack4ImpactTargetX = irandom_range(128,400);
    attack4DirIncrement = -0.9;
}
else
{
    attack4ImpactTargetX = irandom_range(400,672);
    attack4DirIncrement = 0.9;
}
attack4ImpactTargetY = irandom_range(128,288);
gravity = 0.4;

//attack5
attack5Timer = 0;
attack5Counter = 0;
attack5End = false;

//attack6
attack6Timer = 0;
attack6Counter = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(objPlayer)
{
    if fighting = true
    {
        if !instance_exists(objHP)
        {
            instance_create(0,0,objHP);
        }
        if !audio_is_playing(musBoss2) 
        {
            audio_sound_gain(musBoss2,1,0);
            audio_play_sound(musBoss2,10,true);
        }
        if hp &lt;= hpMax/3 and shieldDone = false
        {
            shield = true;
        }
        if shieldDone = true
        {
            shield = false;
        }
        ///////////////////////////////////////////////////////////
        if attackComplete = true
        {
            switch state
            {
                case ATTACK1:
                {
                    attack1Timer = 0;
                    for(var i = 0; i &lt; 4; i++)
                    {
                        attack1Spawned[i] = false;
                    }
                    
                    statePrevious = ATTACK1;
                    attackPrevious = ATTACK1;
                }
                break;
                case ATTACK2:
                {
                    attack2Timer = 0;
                    attack2Counter = 0;
                    
                    statePrevious = ATTACK2;
                    attackPrevious = ATTACK2;
                }
                break;
                case ATTACK3:
                {
                    attack3Timer = 0;
                    attack3Counter = 0;
                    
                    statePrevious = ATTACK3;
                    attackPrevious = ATTACK3;
                }
                break;
                case ATTACK4:
                {
                    attack4Timer = 0;
                    attack4Counter = 0;
                    attack4ImpactTime = irandom_range(20,50);
                    
                    statePrevious = ATTACK4;
                    attackPrevious = ATTACK4;
                }
                break;
                case ATTACK5:
                {
                    attack5Timer = 0;
                    attack5Counter = 0;
                    attack5End = false;
                    
                    statePrevious = ATTACK5;
                    attackPrevious = ATTACK5;
                }
                break;
                case ATTACK6:
                {
                    attack6Timer = 0;
                    attack6Counter = 0;
                    
                    statePrevious = ATTACK6;
                    attackPrevious = ATTACK6;
                    shieldDone = true;
                }
                break;
            }                
            state = TELEPORTING;
            attackComplete = false;
        }
        ///////////////////////////////////////////
        switch state
        {
            case WARMUP:
            {
                if round(image_index) != 0
                {
                    image_speed = -1/18;
                }
                else
                {
                    sprite_index = sprBoss2Idle;
                    image_speed = 1/8;
                    state = ATTACK1;    //put any state you want to test right here
                }
            }
            break;
            case TELEPORTING:
            {
                if teleportLeft = false and teleportRight = false
                {
                    if objBoss2.x &gt;= 400
                    {
                        teleportLeft = true;
                    }
                    if objBoss2.x &lt; 400
                    {
                        teleportRight = true;
                    }
                }
                else
                {
                    teleportTimer ++;
                    if teleportTimer = 45
                    {
                        instance_create(x,y,objBoss2Disappear);                       
                    }
                    if teleported = true
                    {
                        if teleportTimer = 125
                        {
                            if teleportLeft = true
                            {
                                if !instance_exists(objBoss2Reappear)
                                {
                                    instance_create(160,288,objBoss2Reappear);
                                }
                            }
                            if teleportRight = true
                            {
                                if !instance_exists(objBoss2Reappear)
                                {
                                    instance_create(640,288,objBoss2Reappear);
                                }
                            }
                        }
                        if teleportReappear = true
                        {
                            if objPlayer.x &lt; x {image_xscale = 1;}
                            else {image_xscale = -1;}
                            if image_alpha &lt; 1
                            {
                                image_alpha += 0.1;
                            }
                            if vspeed &lt; 9
                            {
                                vspeed += 0.5;
                            }
                            else
                            {
                                vspeed = 9;
                            }
                        }
                    }                                           
                    if place_meeting(x,y+1,objBlock) and !place_meeting(xprevious,yprevious+1,objBlock)
                    {
                        scrScreenShake(15,6);
                    }
                }
                if teleportTimer &gt;= 200 and place_meeting(x,y+1,objBlock)
                {
                    switch attackPrevious
                    {
                        case ATTACK1:
                        {
                            state = ATTACK2;
                        }
                        break;
                        case ATTACK2:
                        {
                            state = ATTACK3;
                        }
                        break;
                        case ATTACK3:
                        {
                            state = ATTACK4;
                        }
                        break;
                        case ATTACK4:
                        {
                            state = ATTACK5;
                        }
                        break;
                        case ATTACK5:
                        {
                            state = ATTACK6;
                        }
                        break;
                        case ATTACK6:
                        {
                            state = ATTACK2;
                        }
                        break;
                    }
                    statePrevious = TELEPORTING;
                    teleportTimer = 0;
                    teleportReappear = false;
                    teleportLeft = false;
                    teleportRight = false;
                    teleported = false;
                }
            }
            break;
            
            case ATTACK1:
            {
                attack1Timer ++;
                if attack1Timer = 1
                {
                    if attack1Spawned[0] = false
                    {
                        scrMakeCircle(1000,400,0,9,4,objBoss2Attack1Projectile);
                        attack1Spawned[0] = true;
                        //show_debug_message("right spawned");
                    }
                }
                if attack1Timer = 80
                {
                    if attack1Spawned[2] = false
                    {
                        scrMakeCircle(-200,400,0,9,4,objBoss2Attack1Projectile);
                        attack1Spawned[2] = true;
                        //show_debug_message("left spawned");
                    }
                }
                if attack1Timer mod 75 == 0
                {
                    for(var i = 0; i &lt; 4; i++)
                    {
                        instance_create(objBoss2.x,objBoss2.y - (objBoss2.sprite_height/2),objBoss2Attack1Filler);                    
                    }
                    scrScreenShake(10,4);
                    audio_sound_pitch(sndBoss2Attack1Filler,random_range(0.8,1));
                    audio_play_sound(sndBoss2Attack1Filler,10,0);
                }
                if attack1Timer = 600
                {
                    attackComplete = true;
                }        
            }
            break;
            case ATTACK2:
            {
                if attack2Counter &lt; 15
                {      
                    if attack2Timer &lt; 35
                    {
                        attack2Timer ++;
                        if attack2Timer = 5 or attack2Timer = 10 or attack2Timer = 15 
                        {
                            instance_create(irandom_range(48,752),irandom_range(48,200),objBoss2AimedTripleBurst);
                            //screen shake is in object step-event
                        }
                    }
                    else
                    {
                        attack2Timer = 0;
                        attack2Counter ++;
                    }
                }
                else
                {
                    attackComplete = true;
                }
            }
            break;
            case ATTACK3:
            {
                attack3Timer ++;
                if attack3Counter = 0
                {
                    if attack3Timer = 10 or attack3Timer = 20 or attack3Timer = 30 or attack3Timer = 40 or attack3Timer = 50
                    {
                        attack3SpawnX = ((attack3Timer/10)*150)-50;
                        attack3SpawnY = -32;
                        instance_create(attack3SpawnX,attack3SpawnY,objBoss2Attack3Falling);
                        //screen shake is in object step-event
                    }
                        if attack3Timer = 150
                        {
                            attack3Timer = 0;
                            attack3Counter ++;
                        }
                }
                if attack3Counter = 1
                {
                    if attack3Timer = 10 or attack3Timer = 20 or attack3Timer = 30 or attack3Timer = 40 or attack3Timer = 50
                    {
                        attack3SpawnX = 800 - (((attack3Timer/10)*150)-50);
                        attack3SpawnY = -32;
                        instance_create(attack3SpawnX,attack3SpawnY,objBoss2Attack3Falling);
                    }
                    if attack3Timer = 150
                    {
                        attack3Timer = 0;
                        attack3Counter ++;
                    }
                }
                if attack3Counter = 2
                {
                    if attack3Timer = 10 or attack3Timer = 20 or attack3Timer = 30
                    {
                        attack3SpawnX = ((attack3Timer/10)*150)-50;
                        attack3SpawnY = -32;
                        attack3SpawnX2 = 800 - (((attack3Timer/10)*150)-50);
                        attack3SpawnY2 = -32;
                        instance_create(attack3SpawnX,attack3SpawnY,objBoss2Attack3Falling);
                        if attack3Timer != 30
                        {
                            instance_create(attack3SpawnX2,attack3SpawnY2,objBoss2Attack3Falling);
                        }
                    }
                    if attack3Timer = 130
                    {
                        attack3Timer = 0;
                        attack3Counter ++;
                    }
                }
                if attack3Counter = 3
                {
                    if attack3Timer = 10 or attack3Timer = 20 or attack3Timer = 30
                    {
                        attack3SpawnX = 300 + ((attack3Timer/10)*150)-50;
                        attack3SpawnY = -32;
                        attack3SpawnX2 = 500 - ((attack3Timer/10)*150)+50;
                        attack3SpawnY2 = -32;
                        instance_create(attack3SpawnX,attack3SpawnY,objBoss2Attack3Falling);
                        if attack3Timer != 10
                        {
                            instance_create(attack3SpawnX2,attack3SpawnY2,objBoss2Attack3Falling);
                        }
                    }
                    if attack3Timer = 130
                    {
                        attack3Timer = 0;
                        attack3Counter ++;
                    }
                }
                if attack3Counter = 4
                {
                    attackComplete = true;
                }
            }
            break;
            case ATTACK4:
            {
                attack4Timer ++;
                
                if attack4Timer mod 35 == 0 and attack4Timer &lt; 350
                {
                    instance_create(-32,irandom_range(48,300),objBoss2Attack4Collide);
                    instance_create(832,irandom_range(48,300),objBoss2Attack4Collide);
                    attack4ImpactTime = irandom_range(20,50);
                    attack4Counter ++;
                    //screen shake is in object step-event
                    if attack4Counter mod 2 == 0
                    {
                        attack4ImpactTargetX = irandom_range(128,400);
                        attack4DirIncrement = -0.9;
                    }
                    else
                    {
                        attack4ImpactTargetX = irandom_range(400,672);
                        attack4DirIncrement = 0.9;
                    }
                    attack4ImpactTargetY = irandom_range(128,192);
                }
                else if attack4Timer &gt;= 400
                {
                    attackComplete = true;
                }
            }
            break;
            case ATTACK5:
            {
                attack5Timer ++;
        
                if !instance_exists(objBoss2Attack5HomingProjectile) and attack5End = false
                {
                    instance_create(400,150,objBoss2Attack5HomingProjectile);
                }
                
                if attack5Timer mod 60 == 0 and attack5Counter != 12
                {
                    scrScreenShake(10,6);
                    scrMakeShapes(objBoss2.x,objBoss2.y,point_direction(x,y,objPlayer.x,objPlayer.y) + irandom_range(-10,10),choose(3,4,6),choose(4,5),random_range(4,9),objBoss2Attack5BlastProjectile);
                    attack5Counter ++;
                }
                else if attack5Counter = 12 
                {
                    attack5End = true;
                }
                if !instance_exists(objBoss2Attack5HomingProjectile) and attack5End = true
                {
                    attackComplete = true;
                }
            }
            break;
            case ATTACK6:
            {
                attack6Timer ++;
                if attack6Counter &lt; 3
                {
                    if attack6Timer = 1
                    {
                        instance_create(x,y,objBoss2Attack6Spawner);
                        scrScreenShake(4,6);
                    }
                    if attack6Timer = 200
                    {
                        attack6Timer = 0;
                        attack6Counter ++;
                    }
                }
                else
                {
                    attackComplete = true;
                    shieldDone = true;
                }
            }
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBlock">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(objPlayer)
{
    if objPlayer.x &lt; x {image_xscale = 1;}
    else {image_xscale = -1;}
}

if (global.grav == 1)  //normal
{
    if !place_free(x,y + vspeed)
    {
        if(vspeed &gt; 0)
        {
            move_contact_solid(270,abs(vspeed));
            vspeed = 0;
            gravity = 0;
        }
    }
    if !place_free(x + hspeed,y)
    { 
        if(hspeed &lt;= 0){move_contact_solid(180,abs(hspeed));}
        if(hspeed &gt; 0){move_contact_solid(0,abs(hspeed));}
        hspeed = 0;
    }
    if !instance_exists(objPlayer)
    {
        hspeed = 0;
    }
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_stop_sound(musBoss2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_set_halign(fa_center);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
