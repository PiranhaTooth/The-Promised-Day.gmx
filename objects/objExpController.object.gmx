<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//create surface

expSurf = -1;


//make sure we never have more than one exp controller object

if (instance_number(object_index) &gt; 1)
    instance_destroy();
    
///exp variables

//exp calculation
expNeeded = 0;

//exp ui
experience = 15;
expLength = 1;
expX = 16
expY = 16
expAlpha = 0;
expTimer = 0;

expScale = 1;
expProgressScale = 1;

growing = false;

global.partLevelUpSystem = part_system_create();
part_system_depth(global.partLevelUpSystem,-100000); //Change the 100 to the depth that you want for your particles

global.partLevelUp = part_type_create();
part_type_shape(global.partLevelUp,pt_shape_flare);
part_type_color2(global.partLevelUp,16767761,12320699);
part_type_alpha2(global.partLevelUp,0.9000,0.0000);
part_type_life(global.partLevelUp,35.0000,50.0000);
part_type_size(global.partLevelUp,0.1347,0.4234,0.0019,-0.0046);
part_type_speed(global.partLevelUp,1.1963,1.9110,0.0230,0.0529);
part_type_direction(global.partLevelUp,0.0000,360.0000,0.0095,-0.5272);
part_type_orientation(global.partLevelUp,0.0000,360.0000,-0.6215,-2.7501,0);
part_type_gravity(global.partLevelUp,0.0000,270.0000);
part_type_blend(global.partLevelUp,false);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if surface_exists(expSurf)
{
    surface_free(expSurf);
}

part_emitter_destroy(global.psys,pemi);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///clearing particles at the end of the room
part_particles_clear(global.partLevelUpSystem);
part_emitter_destroy(global.partLevelUpSystem,global.partLevelUp);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///enabling alphablend early so i don't get a flicker
draw_enable_alphablend(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw exp stuff

//do exp calculations 

expNeeded = 100 * (1 + (global.playerLevel * 0.1));

if (global.playerExperience / expNeeded) &gt;= 1
{
    repeat(120)
    {
        part_particles_create(global.partLevelUpSystem,irandom_range(10,200),irandom_range(10,64),global.partLevelUp,1);
    }
    audio_play_sound(sndLevelUp,10,0);
    global.playerLevel ++;
    global.playerExperience = 0;
    //instance_create(28,48,objLevelUp);
}

//draw exp UI

if global.playerExperience != 0
{
    expLength = lerp(expLength,global.playerExperience * (235 / expNeeded),0.085);  //235 is the sprite width for the sprExpProgress sprite
}
else
{
    expLength = 0;
}

draw_sprite_ext(sprExpUI,global.playerLevel - 1,view_xview[1] + 117,view_yview[1] + 29,expScale,expScale,0,c_white,expAlpha);

//draw surface
if !surface_exists(expSurf)
{
    expSurf = surface_create(sprite_get_width(sprExpUI),sprite_get_height(sprExpUI));
}

surface_set_target(expSurf);

draw_clear_alpha(c_black, 0);
draw_sprite_part_ext(sprExpProgress,0,0,0,expLength,58,18,0,expScale,expScale,c_white,expAlpha);
draw_set_color_write_enable(1, 1, 1, 0)
if global.playerExperience != 0
{
    draw_sprite_ext(sprExpProgressOutlineRight,0,expLength + 18 - 2,expY - 3,expScale,expScale,0,c_white,expAlpha);
}
draw_set_color_write_enable(1, 1, 1, 1)
surface_reset_target();
draw_surface(expSurf,expX,expY);

draw_sprite_part_ext(sprExpProgressOutline,0,0,0,expLength,58,expX + 18,expY,expScale,expScale,c_white,expAlpha);


//fade in/out depending on player position
if instance_exists(objExpOrb)
{
    
    if instance_exists(objPlayer)
    {
        if objPlayer.x &lt; 216 and objPlayer.y &lt; 128
        {
            if expAlpha &gt; 0.05
            {
                expAlpha -= 0.05;
            }
        }
        else
        {
            if expAlpha &lt; 1
            {
                expAlpha += 0.05;
            }
        }
    }
    
    if !instance_exists(objPlayer)
    {
        if expAlpha &gt; 0
        {
            expAlpha -= 0.05;
        }
    }
    
    if expAlpha &lt; 1
    {
        expAlpha += 0.05;
    }
    expTimer = 0;
}
else
{
    expTimer++
    if expTimer &gt;= 50
    {
        if expAlpha &gt; 0
        {
            expAlpha -= 0.025;
        }
    }
}
//change image scale when orb touches place
expScale = clamp(expScale,1,1.03);

if growing = true
{
    expScale = 1.03;
    growing = false;
    audio_play_sound(sndExpGain,10,false);
}
if growing = false and expScale &gt; 1
{
    expScale -= 0.005;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///particle stuff
/*
if (global.playerExperience / expNeeded) &gt;= 1
{
    pemi = part_emitter_create(global.partLevelUpSystem);
    part_emitter_region(global.partLevelUpSystem,pemi,16.0000,200.0000,16.0000,64.0000,ps_shape_rectangle,ps_distr_linear)
    part_emitter_stream(global.partLevelUpSystem,pemi,global.partLevelUp,4.0000);
}
*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
