<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set the duration of the transition and initialise variables
// this code was written by David Strachan and made available to you in the hope it will make your games even more lovely

currentframe = 0
maxframes = 28

persistent = true; // when changing room keep this object alive

if instance_exists(objPlayer)
{
    playerX = objPlayer.x
    playerY = objPlayer.y
    playerXScale = objPlayer.xScale;
}
else
{
    playerX = 32;
    playerY = 32;
    playerXScale = 1;
}

transitionType = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Take image of the old room for the transition 
// this code was written by David Strachan and made available to you in the hope it will make your games even more lovely

// copy the old room so we can display it on the second room
sur_oldroom = surface_create(room_width,room_height);
surface_copy(sur_oldroom,0,0,application_surface)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tidy up the surface and remove it from memory
// this code was written by David Strachan and made available to you in the hope it will make your games even more lovely

// I dont know if you have to do this, but I want to be safe 
surface_free(sur_newroom)
surface_free(sur_oldroom)

if instance_exists(objPlayer)
{
    with objPlayer
    {
        gravity = oldGravity;
        hspeed = oldHspeed;
        vspeed = oldVspeed;
        frozen = false;
    }
}

if room = rTransitionRoom
{
    if instance_exists(objPlayer)
    {
        with objPlayer
        {
            instance_destroy();
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move the transition on by 1 and destroy it if needed 
// this code was written by David Strachan and made available to you in the hope it will make your games even more lovely

currentframe+= 1

if (currentframe &gt; maxframes) {
    instance_destroy() // The transition has finished so destroy it
}


// We are now on the second room so record that room. 
if (currentframe == 2) { 
    sur_newroom = surface_create(room_width,room_height);
    surface_copy(sur_newroom,0,0,application_surface)
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the transition onto the screen
// this code was written by David Strachan and made available to you in the hope it will make your games even more lovely.
// in Draw GUI so I can capture the new room and then overlap the old room ontop 
// and the player doesnt know the room change has happened
draw_set_alpha(1);
draw_enable_alphablend(false);

if currentframe &gt; 1
{

    // convert the number of frames that have passed into a number between 0 and the room width
    var slideamountX = EaseOutQuad(currentframe,0,800,maxframes);
    var slideamountY = EaseOutQuad(currentframe,0,608,maxframes);

    if ((playerY - 608) * -1 &gt; 16) and ((playerY - 608) * -1 &lt; 598) or (transitionType = 1)
    {
        if !instance_exists(objPlayer)
        {
            if surface_exists(sur_oldroom)
            {
                draw_surface(sur_oldroom,-slideamountX * objTownTransitionController.playerXScale,0);
            }
            
            if surface_exists(sur_newroom)
            {
                draw_surface(sur_newroom,(800 * objTownTransitionController.playerXScale)-(slideamountX * objTownTransitionController.playerXScale),0);
            }
        }
        else
        {
            if instance_exists(objTownTransitionController)
            {
                if surface_exists(sur_oldroom)
                {
                    draw_surface(sur_oldroom,-slideamountX * objTownTransitionController.playerXScale,0);
                }
                
                if surface_exists(sur_newroom)
                {
                    draw_surface(sur_newroom,(800 * objTownTransitionController.playerXScale)-(slideamountX * objTownTransitionController.playerXScale),0);
                }
            }
            else
            {
                if surface_exists(sur_oldroom)
                {
                    draw_surface(sur_oldroom,-slideamountX * playerXScale,0);
                }
                
                if surface_exists(sur_newroom)
                {
                    draw_surface(sur_newroom,(800 * playerXScale)-(slideamountX * playerXScale),0);
                }
            }
        }
        if instance_exists(objTownTransitionController)
        {
            transitionType = 1;
        }
    }
    
    else  if ((playerY - 608) * -1 &lt;= 24) or (transitionType = 2)
    {
        if surface_exists(sur_oldroom)
        {
            draw_surface(sur_oldroom,0,slideamountY) ;
        }
        if surface_exists(sur_newroom)
        {
            draw_surface(sur_newroom,0,slideamountY-608);
        }
        transitionType = 2;
    }
    
    else if ((playerY - 608) * -1 &gt;= 598) or (transitionType = 3)
    {
        if surface_exists(sur_oldroom)
        {
            draw_surface(sur_oldroom,0,-slideamountY);
        }
        if surface_exists(sur_newroom)
        {
            draw_surface(sur_newroom,0,608 - slideamountY);
        }
        transitionType = 3;
    }
}


// I do this to hide the flicker where the next room pops up for 1 frame 
if (currentframe == 1) 
{ 
    if surface_exists(sur_oldroom)
    {
        draw_surface(sur_oldroom,0,0);
    }
}

//show_debug_message(string(playerY))
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
