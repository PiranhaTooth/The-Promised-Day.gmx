<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with objPlayer
{
    frozen = true;
}
playerXScale = objPlayer.xScale;
transitionRoom = rTransitionRoom;


locationSprite = objTownTransition.locationSprite;
roomTo = objTownTransition.roomTo;

spriteLeft = 0;
spriteTop = 0;
spriteWidth = 0;
spriteHeight = 0;

timer = 0;

drawX = 400 - sprite_get_xoffset(locationSprite);
drawY = 304 - sprite_get_yoffset(locationSprite);
drawXOld = drawX;

if !instance_exists(objSlideTransition)
{
    with instance_create(0,0,objSlideTransition)
    {
        maxframes = 56;
    }        
}

room_goto(transitionRoom);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timer++
if room = transitionRoom
{
    draw_set_alpha(1);
    draw_set_color(c_white)
    
    if timer = 80
    {
        drawX = 400 - sprite_get_xoffset(locationSprite);
        drawY = 304 - sprite_get_yoffset(locationSprite);   
        drawXOld = drawX;
    } 
        
    if timer &gt; 80
    {
        draw_sprite_part(locationSprite,0,spriteLeft,spriteTop,spriteWidth,sprite_get_height(locationSprite),drawX,drawY);
    }
    
    if timer &gt; 80 and timer &lt; 200
    {                
        if spriteWidth &lt; sprite_get_width(locationSprite)
        {
            spriteWidth = lerp(spriteWidth,sprite_get_width(locationSprite),0.09);
        }
    }
    
    if timer &gt;= 200
    {
        drawX = lerp(drawX,drawXOld + sprite_get_width(locationSprite),0.09);
        spriteLeft = lerp(spriteLeft,sprite_get_width(locationSprite),0.09);
    }
    if timer = 300
    {
        if !instance_exists(objSlideTransition)
        {
            with instance_create(0,0,objSlideTransition)
            {
                maxframes = 56;
            }
            room_goto(roomTo);            
        }
    }
}
if timer &gt; 300 and !instance_exists(objSlideTransition)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
